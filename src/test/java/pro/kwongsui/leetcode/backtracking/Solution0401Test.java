package pro.kwongsui.leetcode.backtracking;

import static org.junit.jupiter.api.Assertions.assertIterableEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

class Solution0401Test {

  @ParameterizedTest
  @CsvSource({
      "0, '0:00'",
      "1, '1:00,2:00,4:00,8:00,0:01,0:02,0:04,0:08,0:16,0:32'",
      "2, '3:00,5:00,9:00,1:01,1:02,1:04,1:08,1:16,1:32,6:00,10:00,"
          + "2:01,2:02,2:04,2:08,2:16,2:32,4:01,4:02,4:04,4:08,4:16,4:32,"
          + "8:01,8:02,8:04,8:08,8:16,8:32,0:03,0:05,0:09,0:17,0:33,0:06,"
          + "0:10,0:18,0:34,0:12,0:20,0:36,0:24,0:40,0:48'",
      "3, '0:07,0:11,0:13,0:14,0:19,0:21,0:22,0:25,0:26,0:28,0:35,0:37,0:38,"
          + "0:41,0:42,0:44,0:49,0:50,0:52,0:56,1:03,1:05,1:06,1:09,1:10,1:12,1:17,"
          + "1:18,1:20,1:24,1:33,1:34,1:36,1:40,1:48,2:03,2:05,2:06,2:09,2:10,2:12,"
          + "2:17,2:18,2:20,2:24,2:33,2:34,2:36,2:40,2:48,3:01,3:02,3:04,3:08,3:16,"
          + "3:32,4:03,4:05,4:06,4:09,4:10,4:12,4:17,4:18,4:20,4:24,4:33,4:34,4:36,"
          + "4:40,4:48,5:01,5:02,5:04,5:08,5:16,5:32,6:01,6:02,6:04,6:08,6:16,6:32,7"
          + ":00,8:03,8:05,8:06,8:09,8:10,8:12,8:17,8:18,8:20,8:24,8:33,8:34,8:36,8:40,"
          + "8:48,9:01,9:02,9:04,9:08,9:16,9:32,10:01,10:02,10:04,10:08,10:16,10:32,11:00'",
      "7, '3:31,3:47,3:55,3:59,5:31,5:47,5:55,5:59,6:31,6:47,6:55,6:59,7:15,7:23,7:27,7:29,"
          + "7:30,7:39,7:43,7:45,7:46,7:51,7:53,7:54,7:57,7:58,9:31,9:47,9:55,9:59,10:31,"
          + "10:47,10:55,10:59,11:15,11:23,11:27,11:29,11:30,11:39,11:43,11:45,11:46,11:51,"
          + "11:53,11:54,11:57,11:58'",
      "10, ''"
  })
  void readBinaryWatch(int input, String expected) {
    List<String> ans = new ArrayList<>();
    if (expected.length() != 0) {
      ans = Arrays.asList(expected.split(","));
    }
    Collections.sort(ans);
    List<String> res = new Solution0401().readBinaryWatch(input);
    Collections.sort(res);
    assertIterableEquals(ans, res);
  }
}

